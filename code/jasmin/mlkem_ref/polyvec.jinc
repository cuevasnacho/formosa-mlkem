require "params.jinc"
require "poly.jinc"

inline
fn __polyvec_add2(stack u16[MLKEM_VECN] r, stack u16[MLKEM_VECN] b) -> stack u16[MLKEM_VECN]
{
  r[0:MLKEM_N] = _poly_add2(r[0:MLKEM_N], b[0:MLKEM_N]);
  r[MLKEM_N:MLKEM_N] = _poly_add2(r[MLKEM_N:MLKEM_N], b[MLKEM_N:MLKEM_N]);
  r[2*MLKEM_N:MLKEM_N] = _poly_add2(r[2*MLKEM_N:MLKEM_N], b[2*MLKEM_N:MLKEM_N]);
  r[3*MLKEM_N:MLKEM_N] = _poly_add2(r[3*MLKEM_N:MLKEM_N], b[3*MLKEM_N:MLKEM_N]);

  return r;
}

inline
fn __polyvec_csubq(stack u16[MLKEM_VECN] r) -> stack u16[MLKEM_VECN]
{
  r[0:MLKEM_N] = _poly_csubq(r[0:MLKEM_N]);
  r[MLKEM_N:MLKEM_N] = _poly_csubq(r[MLKEM_N:MLKEM_N]);
  r[2*MLKEM_N:MLKEM_N] = _poly_csubq(r[2*MLKEM_N:MLKEM_N]);
  r[3*MLKEM_N:MLKEM_N] = _poly_csubq(r[3*MLKEM_N:MLKEM_N]);

  return r;
}

inline
fn __polyvec_compress(reg u64 rp, stack u16[MLKEM_VECN] a)
{
  stack u16[MLKEM_VECN] aa;
  reg u16 c, b;
  reg u16[8] t;
  reg u64 d0;
  reg u64 i j;
  inline int k;

  i = 0;
  j = 0;
  
  aa = __polyvec_csubq(a);

  while (i < MLKEM_VECN)
  {
    for k = 0 to 8
    {
      d0 = (64u)aa[i];
      d0 <<= 11;
      d0 += 1664;
      d0 *= 645084;
      d0 >>= 31;
      d0 &= 0x7ff;
      t[k] = (16u)d0;

      i += 1;
    }

    c = t[0];
    (u8)[rp + j] = c;
    j += 1;

    b = t[0];
    b >>= 8;
    c = t[1];
    c <<= 3;
    c |= b;
    (u8)[rp + j] = c;
    j += 1;

    b = t[1];
    b >>= 5;
    c = t[2];
    c <<= 6;
    c |= b;
    (u8)[rp + j] = c;
    j += 1;
    
    b = t[2];
    b >>= 2;
    (u8)[rp + j] = b;
    j += 1;

    b = t[2];
    b >>= 10;
    c = t[3];
    c <<= 1;
    c |= b;
    (u8)[rp + j] = c;
    j += 1;

    b = t[3];
    b >>= 7;
    c = t[4];
    c <<= 4;
    c |= b;
    (u8)[rp + j] = c;
    j += 1;

    b = t[4];
    b >>= 4;
    c = t[5];
    c <<= 7;
    c |= b;
    (u8)[rp + j] = c;
    j += 1;

    b = t[5];
    b >>= 1;
    (u8)[rp + j] = b;
    j += 1;

    b = t[5];
    b >>= 9;
    c = t[6];
    c <<= 2;
    c |= b;
    (u8)[rp + j] = c;
    j += 1;

    b = t[6];
    b >>= 6;
    c = t[7];
    c <<= 5;
    c |= b;
    (u8)[rp + j] = c;
    j += 1;
    
    t[7] >>= 3;
    (u8)[rp + j] = t[7];
    j += 1;
  }
}

inline
fn __i_polyvec_compress(reg ptr u8[MLKEM_POLYVECCOMPRESSEDBYTES] rp, stack u16[MLKEM_VECN] a) -> reg ptr u8[MLKEM_POLYVECCOMPRESSEDBYTES]
{
  stack u16[MLKEM_VECN] aa;
  reg u16 c, b;
  reg u16[8] t;
  reg u64 d0;
  reg u64 i j;
  inline int k;

  i = 0;
  j = 0;
  
  aa = __polyvec_csubq(a);

  while (i < MLKEM_VECN)
  {
    for k = 0 to 8
    {
      d0 = (64u)aa[i];
      d0 <<= 11;
      d0 += 1664;
      d0 *= 645084;
      d0 >>= 31;
      d0 &= 0x7ff;
      t[k] = (16u)d0;

      i += 1;
    }

    c = t[0];
    rp[j] = c;
    j += 1;

    b = t[0];
    b >>= 8;
    c = t[1];
    c <<= 3;
    c |= b;
    rp[j] = c;
    j += 1;

    b = t[1];
    b >>= 5;
    c = t[2];
    c <<= 6;
    c |= b;
    rp[j] = c;
    j += 1;
    
    b = t[2];
    b >>= 2;
    rp[j] = b;
    j += 1;

    b = t[2];
    b >>= 10;
    c = t[3];
    c <<= 1;
    c |= b;
    rp[j] = c;
    j += 1;

    b = t[3];
    b >>= 7;
    c = t[4];
    c <<= 4;
    c |= b;
    rp[j] = c;
    j += 1;

    b = t[4];
    b >>= 4;
    c = t[5];
    c <<= 7;
    c |= b;
    rp[j] = c;
    j += 1;

    b = t[5];
    b >>= 1;
    rp[j] = b;
    j += 1;

    b = t[5];
    b >>= 9;
    c = t[6];
    c <<= 2;
    c |= b;
    rp[j] = c;
    j += 1;

    b = t[6];
    b >>= 6;
    c = t[7];
    c <<= 5;
    c |= b;
    rp[j] = c;
    j += 1;
    
    t[7] >>= 3;
    rp[j] = t[7];
    j += 1;
  }

  return rp;
}

inline
fn __polyvec_decompress(reg u64 ap) -> stack u16[MLKEM_VECN]
{
  stack u16[MLKEM_VECN] r;
  reg u32 t0, t1, t2;
  reg u32 d0, d1;
  reg u64 i j;

  i = 0;
  j = 0;
  
  while (i < MLKEM_VECN)
  {
    t0 = (32u)(u8)[ap + j];
    j += 1;
    t1 = (32u)(u8)[ap + j];
    j += 1;
    d1 = t1;
    d1 <<= 8;
    t0 |= d1;
    t0 &= 0x7ff;
    t0 *= MLKEM_Q;
    t0 += 1024;
    t0 >>= 11;
    r[i] = t0;
    i += 1;

    t0 = (32u)(u8)[ap + j];
    j += 1;
    d0 = t1;
    d0 >>= 3;
    d1 = t0;
    d1 <<= 5;
    d0 |= d1;
    d0 &= 0x7ff;
    d0 *= MLKEM_Q;
    d0 += 1024;
    d0 >>= 11;
    r[i] = d0;
    i += 1;

    t1 = (32u)(u8)[ap + j];
    j += 1;
    t2 = (32u)(u8)[ap + j];
    j += 1;
    t0 >>= 6;
    d0 = t1;
    d0 <<= 2;
    d1 = t2;
    d1 <<= 10;
    d0 |= d1;
    d0 |= t0;
    d0 &= 0x7ff;
    d0 *= MLKEM_Q;
    d0 += 1024;
    d0 >>= 11;
    r[i] = d0;
    i += 1;

    t0 = (32u)(u8)[ap + j];
    j += 1;
    d0 = t2;
    d0 >>= 1;
    d1 = t0;
    d1 <<= 7;
    d0 |= d1;
    d0 &= 0x7ff;
    d0 *= MLKEM_Q;
    d0 += 1024;
    d0 >>= 11;
    r[i] = d0;
    i += 1;

    t1 = (32u)(u8)[ap + j];
    j += 1;
    d0 = t0;
    d0 >>= 4;
    d1 = t1;
    d1 <<= 4;
    d0 |= d1;
    d0 &= 0x7ff;
    d0 *= MLKEM_Q;
    d0 += 1024;
    d0 >>= 11;
    r[i] = d0;
    i += 1;

    t2 = (32u)(u8)[ap + j];
    j += 1;
    t0 = (32u)(u8)[ap + j];
    j += 1;
    t1 >>= 7;
    d0 = t2;
    d0 <<= 1;
    d1 = t0;
    d1 <<= 9;
    d0 |= d1;
    d0 |= t1;
    d0 &= 0x7ff;
    d0 *= MLKEM_Q;
    d0 += 1024;
    d0 >>= 11;
    r[i] = d0;
    i += 1;

    t1 = (32u)(u8)[ap + j];
    j += 1;
    d0 = t0;
    d0 >>= 2;
    d1 = t1;
    d1 <<= 6;
    d0 |= d1;
    d0 &= 0x7ff;
    d0 *= MLKEM_Q;
    d0 += 1024;
    d0 >>= 11;
    r[i] = d0;
    i += 1;

    t0 = (32u)(u8)[ap + j];
    j += 1;
    d0 = t1;
    d0 >>= 5;
    d1 = t0;
    d1 <<= 3;
    d0 |= d1;
    d0 &= 0x7ff;
    d0 *= MLKEM_Q;
    d0 += 1024;
    d0 >>= 11;
    r[i] = d0;
    i += 1;
  }
  return r;
}

inline
fn __polyvec_frombytes(reg u64 ap) -> stack u16[MLKEM_VECN]
{
  stack u16[MLKEM_VECN] r;
  reg u64 pp;

  pp = ap;
  r[0:MLKEM_N] = _poly_frombytes(r[0:MLKEM_N], pp);
  pp += MLKEM_POLYBYTES;
  _ = #init_msf();
  r[MLKEM_N:MLKEM_N] = _poly_frombytes(r[MLKEM_N:MLKEM_N], pp);
  pp += MLKEM_POLYBYTES;
  _ = #init_msf();
  r[2*MLKEM_N:MLKEM_N] = _poly_frombytes(r[2*MLKEM_N:MLKEM_N], pp);
  pp += MLKEM_POLYBYTES;
  _ = #init_msf();
  r[3*MLKEM_N:MLKEM_N] = _poly_frombytes(r[3*MLKEM_N:MLKEM_N], pp);

  return r;
}

inline
fn __polyvec_invntt(stack u16[MLKEM_VECN] r) -> stack u16[MLKEM_VECN]
{
  r[0:MLKEM_N] = _poly_invntt(r[0:MLKEM_N]);
  r[MLKEM_N:MLKEM_N] = _poly_invntt(r[MLKEM_N:MLKEM_N]);
  r[2*MLKEM_N:MLKEM_N] = _poly_invntt(r[2*MLKEM_N:MLKEM_N]);
  r[3*MLKEM_N:MLKEM_N] = _poly_invntt(r[3*MLKEM_N:MLKEM_N]);

  return r;
}

inline
fn __polyvec_ntt(stack u16[MLKEM_VECN] r) -> stack u16[MLKEM_VECN]
{
  r[0:MLKEM_N] = _poly_ntt(r[0:MLKEM_N]);
  r[MLKEM_N:MLKEM_N] = _poly_ntt(r[MLKEM_N:MLKEM_N]);
  r[2*MLKEM_N:MLKEM_N] = _poly_ntt(r[2*MLKEM_N:MLKEM_N]);
  r[3*MLKEM_N:MLKEM_N] = _poly_ntt(r[3*MLKEM_N:MLKEM_N]);

  return r;
}


inline
fn __polyvec_pointwise_acc(stack u16[MLKEM_VECN] a, stack u16[MLKEM_VECN] b) -> stack u16[MLKEM_N]
{
  stack u16[MLKEM_N] t;
  stack u16[MLKEM_N] r;

  r = _poly_basemul(r, a[0:MLKEM_N], b[0:MLKEM_N]);
  t = _poly_basemul(t, a[MLKEM_N:MLKEM_N], b[MLKEM_N:MLKEM_N]);
  r = _poly_add2(r, t);
  t = _poly_basemul(t, a[2*MLKEM_N:MLKEM_N], b[2*MLKEM_N:MLKEM_N]);
  r = _poly_add2(r, t);
  t = _poly_basemul(t, a[3*MLKEM_N:MLKEM_N], b[3*MLKEM_N:MLKEM_N]);
  r = _poly_add2(r, t);

  r = __poly_reduce(r);

  return r;
}

inline
fn __polyvec_reduce(stack u16[MLKEM_VECN] r) -> stack u16[MLKEM_VECN]
{
  r[0:MLKEM_N] = __poly_reduce(r[0:MLKEM_N]);
  r[MLKEM_N:MLKEM_N] = __poly_reduce(r[MLKEM_N:MLKEM_N]);
  r[2*MLKEM_N:MLKEM_N] = __poly_reduce(r[2*MLKEM_N:MLKEM_N]);
  r[3*MLKEM_N:MLKEM_N] = __poly_reduce(r[3*MLKEM_N:MLKEM_N]);

  return r;
}

inline
fn __polyvec_tobytes(reg u64 rp, stack u16[MLKEM_VECN] a)
{
  reg u64 pp;

  pp = rp;
  a[0:MLKEM_N] = _poly_tobytes(pp, a[0:MLKEM_N]);
  pp += MLKEM_POLYBYTES;
  a[MLKEM_N:MLKEM_N] = _poly_tobytes(pp, a[MLKEM_N:MLKEM_N]);
  pp += MLKEM_POLYBYTES;
  a[2*MLKEM_N:MLKEM_N] = _poly_tobytes(pp, a[2*MLKEM_N:MLKEM_N]);
  pp += MLKEM_POLYBYTES;
  a[3*MLKEM_N:MLKEM_N] = _poly_tobytes(pp, a[3*MLKEM_N:MLKEM_N]);
}
