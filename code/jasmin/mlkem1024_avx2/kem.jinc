require "indcpa.jinc"
require "verify.jinc"

inline
fn __crypto_kem_keypair_jazz(#spill_to_mmx reg u64 pkp, #spill_to_mmx reg u64 skp, #spill_to_mmx reg ptr u8[MLKEM_SYMBYTES*2] randomnessp)
{
  reg ptr u8[MLKEM_SYMBYTES] randomnessp1 randomnessp2;

  stack u8[32] h_pk;
  reg u64 t64;
  inline int i;

  () = #spill(pkp, skp);

  randomnessp1 = randomnessp[0:MLKEM_SYMBYTES];
  () = #spill(randomnessp);
  __indcpa_keypair(pkp, skp, randomnessp1);

  () = #unspill(skp, pkp);
  skp = #LEA(skp + MLKEM_POLYVECBYTES);

  for i=0 to MLKEM_INDCPA_PUBLICKEYBYTES/8
  {
    (u64)[skp + 8 * i] = (u64)[pkp + 8 * i];
  }

  skp = #LEA(skp + MLKEM_INDCPA_PUBLICKEYBYTES);
  () = #spill(skp);
  () = #unspill(pkp);
  t64 = MLKEM_PUBLICKEYBYTES;
  h_pk = _isha3_256(h_pk, pkp, t64);
  _ = #init_msf();
  () = #unspill(skp);

  for i=0 to 4
  {
    (u64)[skp + 8 * i] = h_pk[u64 i];
  }

  () = #unspill(randomnessp);
  randomnessp2 = randomnessp[MLKEM_SYMBYTES:MLKEM_SYMBYTES];
  for i=0 to MLKEM_SYMBYTES/8
  {
    (u64)[skp + 8 * i + 32] = randomnessp2[u64 i];
  }
}

inline
fn __crypto_kem_enc_jazz(#spill_to_mmx reg u64 ctp, #spill_to_mmx reg u64 shkp, #spill_to_mmx reg u64 pkp, reg ptr u8[MLKEM_SYMBYTES] randomnessp)
{
  inline int i;

  stack u8[MLKEM_SYMBYTES * 2] buf kr;
  reg u64 t64;

  () = #spill(pkp, ctp, shkp);
  
  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = randomnessp[u64 i];
    buf[u64 i] = t64;
  }

  () = #unspill(pkp);

  t64 = MLKEM_PUBLICKEYBYTES;
  buf[MLKEM_SYMBYTES:MLKEM_SYMBYTES] = _isha3_256(buf[MLKEM_SYMBYTES:MLKEM_SYMBYTES], pkp, t64);

  kr = _sha3_512_64(kr, buf);
  _ = #init_msf();

  () = #unspill(pkp, ctp);
  __indcpa_enc_0(ctp, buf[0:MLKEM_INDCPA_MSGBYTES], pkp, kr[MLKEM_SYMBYTES:MLKEM_SYMBYTES]);
  () = #unspill(shkp);

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = kr[u64 i];
    (u64)[shkp + 8*i] = t64;
  }
}

inline
fn __crypto_kem_dec_jazz(#spill_to_mmx reg u64 shkp, #spill_to_mmx reg u64 ctp, #spill_to_mmx reg u64 skp)
{
  stack u8[MLKEM_INDCPA_CIPHERTEXTBYTES] ctpc;
  stack u8[2*MLKEM_SYMBYTES] kr buf;
  stack u8[32] h_pk;
  reg u64 pkp hp zp t64 cnd;
  inline int i;

  #msf reg u64 msf;

  buf[0:MLKEM_INDCPA_MSGBYTES] = __indcpa_dec_1(buf[0:MLKEM_INDCPA_MSGBYTES], ctp, skp);

  () = #spill(ctp, shkp);
  hp = skp;
  hp += 32 + (24 * MLKEM_K * MLKEM_N>>3);

  /* fixme: should loads be 256-bits long? */
  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = (u64)[hp + 8*i];
    buf.[u64 MLKEM_SYMBYTES + 8*i] = t64;
  }

  kr = _sha3_512_64(kr, buf);
  
  msf = #init_msf();
  pkp = skp;
  pkp += 12 * MLKEM_K * MLKEM_N>>3;

  #update_after_call ctpc, msf = __indcpa_enc_1(ctpc, buf[0:MLKEM_INDCPA_MSGBYTES], pkp, kr[MLKEM_SYMBYTES:MLKEM_SYMBYTES], msf);
  () = #unspill(ctp);
  ctp = #protect(ctp, msf);
  
  cnd = __verify(ctp, ctpc);
  () = #spill(cnd);
  
  zp = skp;
  zp = #LEA(zp + 64);
  zp += 24 * MLKEM_K * MLKEM_N>>3;
  zp = #protect(zp, msf);
  
  () = #spill(skp);
  h_pk = _shake256_1120_32(h_pk, zp, ctp);
  _ = #init_msf();
  () = #unspill(shkp);
  for i=0 to 4
  {
    (u64)[shkp + 8 * i] = h_pk[u64 i];
  }

  () = #unspill(cnd);
  __cmov(shkp, kr[0:MLKEM_SYMBYTES], cnd); 
}
