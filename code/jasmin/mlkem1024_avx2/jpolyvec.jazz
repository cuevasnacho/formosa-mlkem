require "params.jinc"
require "polyvec.jinc"

/* These exported functions are just for unit testing */

export fn polyvec_tobytes_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_VECN] a;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  for i = 0 to MLKEM_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  a[0:MLKEM_N], msf = _nttunpack(a[0:MLKEM_N], msf);
  a[MLKEM_N:MLKEM_N], msf = _nttunpack(a[MLKEM_N:MLKEM_N], msf);
  a[2*MLKEM_N:MLKEM_N], msf = _nttunpack(a[2*MLKEM_N:MLKEM_N], msf);
  a[3*MLKEM_N:MLKEM_N], msf = _nttunpack(a[3*MLKEM_N:MLKEM_N], msf);

  msf = __polyvec_tobytes(rp, a, msf);
}


export fn polyvec_decompress_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_VECN] r;
  reg u16 t;
  inline int i;

  r = __polyvec_decompress(ap);

  for i = 0 to MLKEM_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}


export fn polyvec_compress_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_VECN] a;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  for i = 0 to MLKEM_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
  }

  msf = __polyvec_compress(rp, a, msf);
}


export fn polyvec_frombytes_jazz(reg u64 rp, reg u64 ap) 
{
  stack u16[MLKEM_VECN] r;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  r, msf = __polyvec_frombytes(ap, msf);

  r[0:MLKEM_N] = _nttpack(r[0:MLKEM_N]);
  r[MLKEM_N:MLKEM_N] = _nttpack(r[MLKEM_N:MLKEM_N]);
  r[2*MLKEM_N:MLKEM_N] = _nttpack(r[2*MLKEM_N:MLKEM_N]);
  r[3*MLKEM_N:MLKEM_N] = _nttpack(r[3*MLKEM_N:MLKEM_N]);

  for i = 0 to MLKEM_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_add2_jazz(reg u64 rp, reg u64 bp) 
{
  stack u16[MLKEM_VECN] a;
  stack u16[MLKEM_VECN] b;
  stack u16[MLKEM_VECN] r;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  for i = 0 to MLKEM_VECN {
    t = (u16)[rp + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  r, msf = __polyvec_add2(a, b, msf);

  for i = 0 to MLKEM_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_pointwise_acc_jazz(reg u64 rp, reg u64 ap, reg u64 bp) 
{
  stack u16[MLKEM_VECN] a;
  stack u16[MLKEM_VECN] b;
  stack u16[MLKEM_N] r;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  for i = 0 to MLKEM_VECN {
    t = (u16)[ap + 2*i];
    a[i] = t;
    t = (u16)[bp + 2*i];
    b[i] = t;
  }

  a[0:MLKEM_N], msf = _nttunpack(a[0:MLKEM_N], msf);
  a[MLKEM_N:MLKEM_N], msf = _nttunpack(a[MLKEM_N:MLKEM_N], msf);
  a[2*MLKEM_N:MLKEM_N], msf = _nttunpack(a[2*MLKEM_N:MLKEM_N], msf);
  a[3*MLKEM_N:MLKEM_N], msf = _nttunpack(a[3*MLKEM_N:MLKEM_N], msf);

  b[0:MLKEM_N], msf = _nttunpack(b[0:MLKEM_N], msf);
  b[MLKEM_N:MLKEM_N], msf = _nttunpack(b[MLKEM_N:MLKEM_N], msf);
  b[2*MLKEM_N:MLKEM_N], msf = _nttunpack(b[2*MLKEM_N:MLKEM_N], msf);
  b[3*MLKEM_N:MLKEM_N], msf = _nttunpack(b[3*MLKEM_N:MLKEM_N], msf);

  r, msf = __polyvec_pointwise_acc(r, a, b, msf);

  r = _nttpack(r);

  for i = 0 to MLKEM_N {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_ntt_jazz(reg u64 rp) 
{
  stack u16[MLKEM_VECN] r;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  for i = 0 to MLKEM_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r, msf = __polyvec_ntt(r, msf);

  r[0:MLKEM_N] = _nttpack(r[0:MLKEM_N]);
  r[MLKEM_N:MLKEM_N] = _nttpack(r[MLKEM_N:MLKEM_N]);
  r[2*MLKEM_N:MLKEM_N] = _nttpack(r[2*MLKEM_N:MLKEM_N]);
  r[3*MLKEM_N:MLKEM_N] = _nttpack(r[3*MLKEM_N:MLKEM_N]);

  for i = 0 to MLKEM_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_invntt_jazz(reg u64 rp) 
{
  stack u16[MLKEM_VECN] r;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  for i = 0 to MLKEM_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r[0:MLKEM_N], msf = _nttunpack(r[0:MLKEM_N], msf);
  r[MLKEM_N:MLKEM_N], msf = _nttunpack(r[MLKEM_N:MLKEM_N], msf);
  r[2*MLKEM_N:MLKEM_N], msf = _nttunpack(r[2*MLKEM_N:MLKEM_N], msf);
  r[3*MLKEM_N:MLKEM_N], msf = _nttunpack(r[3*MLKEM_N:MLKEM_N], msf);

  r, msf = __polyvec_invntt(r, msf);

  for i = 0 to MLKEM_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_csubq_jazz(reg u64 rp) 
{
  stack u16[MLKEM_VECN] r;
  reg u16 t;
  inline int i;

  #msf reg u64 msf;
  msf = #init_msf();

  for i = 0 to MLKEM_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r, msf = __polyvec_csubq(r, msf);

  for i = 0 to MLKEM_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}

export fn polyvec_reduce_jazz(reg u64 rp) 
{
  stack u16[MLKEM_VECN] r;
  reg u16 t;
  inline int i;

  for i = 0 to MLKEM_VECN {
    t = (u16)[rp + 2*i];
    r[i] = t;
  }

  r = __polyvec_reduce(r);

  for i = 0 to MLKEM_VECN {
    t = r[i];
    (u16)[rp + 2*i] = t;
  }
}
