require "params.jinc"
require "poly.jinc"
require "polyvec.jinc"
require "gen_matrix.jinc"

inline
fn __indcpa_keypair(#spill_to_mmx reg u64 pkp, #spill_to_mmx reg u64 skp, reg ptr u8[MLKEM_SYMBYTES] randomnessp)
{
  stack u16[MLKEM_K*MLKEM_VECN] aa;
  stack u16[MLKEM_VECN] e pkpv skpv;
  stack u8[64] buf;
  stack u8[MLKEM_SYMBYTES] publicseed noiseseed;
  stack u8[32] inbuf;
  reg u64 t64;
  reg u8 nonce;
  inline int i;
  #msf reg u64 msf;

  () = #spill(pkp, skp);

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = randomnessp[u64 i];
    inbuf[u64 i] = t64;
  }

  buf = _sha3_512_32(buf, inbuf);

  for i=0 to MLKEM_SYMBYTES/8
  {
    #[declassify]
    t64 = buf[u64 i];
    publicseed[u64 i] = t64;
    t64 = buf[u64 i + MLKEM_SYMBYTES/8];
    noiseseed[u64 i] = t64;
  }

  msf = #init_msf();
  aa, msf = __gen_matrix(publicseed, 0, msf);

  nonce = 0;
  #update_after_call skpv[0:MLKEM_N], skpv[MLKEM_N:MLKEM_N], skpv[2*MLKEM_N:MLKEM_N], skpv[3*MLKEM_N:MLKEM_N], msf = _poly_getnoise_eta1_4x(skpv[0:MLKEM_N], skpv[MLKEM_N:MLKEM_N], skpv[2*MLKEM_N:MLKEM_N], skpv[3*MLKEM_N:MLKEM_N], noiseseed, nonce, msf);

  nonce = 4;
  #update_after_call e[0:MLKEM_N], e[MLKEM_N:MLKEM_N], e[2*MLKEM_N:MLKEM_N], e[3*MLKEM_N:MLKEM_N], msf = _poly_getnoise_eta1_4x(e[0:MLKEM_N], e[MLKEM_N:MLKEM_N], e[2*MLKEM_N:MLKEM_N], e[3*MLKEM_N:MLKEM_N], noiseseed, nonce, msf);

  skpv, msf = __polyvec_ntt(skpv, msf);
  e, msf    = __polyvec_ntt(e, msf);


  for i=0 to MLKEM_K
  {
    pkpv[i*MLKEM_N:MLKEM_N], msf = __polyvec_pointwise_acc(pkpv[i*MLKEM_N:MLKEM_N], aa[i*MLKEM_VECN:MLKEM_VECN], skpv, msf);
    #update_after_call pkpv[i*MLKEM_N:MLKEM_N], msf = _poly_frommont(pkpv[i*MLKEM_N:MLKEM_N], msf);
  }
  () = #unspill(pkp);
  pkp = #protect(pkp, msf);

  pkpv, msf = __polyvec_add2(pkpv, e, msf);
  pkpv = __polyvec_reduce(pkpv);

  () = #unspill(skp);

  msf = __polyvec_tobytes(skp, skpv, msf);
  msf = __polyvec_tobytes(pkp, pkpv, msf);

  pkp = #LEA(pkp + MLKEM_POLYVECBYTES);

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = publicseed[u64 i];
    (u64)[pkp] = t64;
    pkp = #LEA(pkp + 8);
  }
}

inline
fn __indcpa_enc_0(reg u64 sctp, reg ptr u8[MLKEM_INDCPA_MSGBYTES] msgp, reg u64 pkp, #spill_to_mmx reg ptr u8[MLKEM_SYMBYTES] noiseseed)
{
  stack u16[MLKEM_VECN] pkpv sp ep bp;
  stack u16[MLKEM_K*MLKEM_VECN] aat;
  stack u16[MLKEM_N] k epp v;
  stack u8[MLKEM_SYMBYTES] publicseed;
  reg u64 i t64;
  reg u64 ctp;
  reg u8 nonce;
  reg bool cond;
  inline int w;

  #msf reg u64 msf;
  msf = #init_msf();

  () = #spill(noiseseed);

  pkpv, msf = __polyvec_frombytes(pkp, msf);

  i = 0;
  pkp = #LEA(pkp + MLKEM_POLYVECBYTES);
  while { cond = i < MLKEM_SYMBYTES/8; } (cond) {
    msf = #update_msf(cond, msf);
    #[declassify]
    t64 = (u64)[pkp];
    publicseed.[u64 8 * (int)i] = t64;
    pkp = #LEA(pkp + 8);
    i = #LEA(i + 1);
  }
  msf = #update_msf(!cond, msf);

  #update_after_call k, msf = _poly_frommsg_1(k, msgp, msf);

  aat, msf = __gen_matrix(publicseed, 1, msf);
  () = #unspill(noiseseed);
  noiseseed = #protect_ptr(noiseseed, msf);

  nonce = 0;
  #update_after_call sp[0:MLKEM_N], sp[MLKEM_N:MLKEM_N], sp[2*MLKEM_N:MLKEM_N], sp[3*MLKEM_N:MLKEM_N], msf = _poly_getnoise_eta1_4x(sp[0:MLKEM_N], sp[MLKEM_N:MLKEM_N], sp[2*MLKEM_N:MLKEM_N], sp[3*MLKEM_N:MLKEM_N], noiseseed, nonce, msf);
  noiseseed = #protect_ptr(noiseseed, msf);

  nonce = 4;
  #update_after_call ep[0:MLKEM_N], ep[MLKEM_N:MLKEM_N], ep[2*MLKEM_N:MLKEM_N], ep[3*MLKEM_N:MLKEM_N], msf = _poly_getnoise_eta1_4x(ep[0:MLKEM_N], ep[MLKEM_N:MLKEM_N], ep[2*MLKEM_N:MLKEM_N], ep[3*MLKEM_N:MLKEM_N], noiseseed, nonce, msf);
  noiseseed = #protect_ptr(noiseseed, msf);

  nonce = 8;
  epp = _poly_getnoise_eta2(epp, noiseseed, nonce);
  msf = #init_msf();

  sp, msf = __polyvec_ntt(sp, msf);
    
  for w=0 to MLKEM_K
  {
    bp[w*MLKEM_N:MLKEM_N], msf = __polyvec_pointwise_acc(bp[w*MLKEM_N:MLKEM_N], aat[w*MLKEM_VECN:MLKEM_VECN], sp, msf);
  }
 
  v, msf = __polyvec_pointwise_acc(v, pkpv, sp, msf);

  bp, msf = __polyvec_invntt(bp, msf);
  #update_after_call v, msf = _poly_invntt(v, msf);

  bp, msf = __polyvec_add2(bp, ep, msf);
  #update_after_call v, msf = _poly_add2(v, epp, msf);
  #update_after_call v, msf = _poly_add2(v, k, msf);
  sctp = #protect(sctp, msf);
  bp = __polyvec_reduce(bp);
  v  = __poly_reduce(v);

  ctp = sctp;
  msf = __polyvec_compress(ctp, bp, msf);
  ctp = #LEA(ctp + MLKEM_POLYVECCOMPRESSEDBYTES);
  v, msf = _poly_compress(ctp, v, msf);
}

fn __indcpa_enc_1(#spill_to_mmx reg ptr u8[MLKEM_INDCPA_CIPHERTEXTBYTES] ctp, reg ptr u8[MLKEM_INDCPA_MSGBYTES] msgp, reg u64 pkp, #spill_to_mmx reg ptr u8[MLKEM_SYMBYTES] noiseseed, #msf reg u64 msf) -> reg ptr u8[MLKEM_INDCPA_CIPHERTEXTBYTES], #msf reg u64
{
  stack u16[MLKEM_VECN] pkpv sp ep bp;
  stack u16[MLKEM_K*MLKEM_VECN] aat;
  stack u16[MLKEM_N] k epp v;
  stack u8[MLKEM_SYMBYTES] publicseed;
  reg u64 i t64;
  reg u8 nonce;
  reg bool cond;
  inline int w;

  () = #spill(ctp, noiseseed);

  pkpv, msf = __polyvec_frombytes(pkp, msf);

  i = 0;
  pkp = #LEA(pkp + MLKEM_POLYVECBYTES);
  while { cond = i < MLKEM_SYMBYTES/8; } (cond) {
    msf = #update_msf(cond, msf);
    #[declassify]
    t64 = (u64)[pkp];
    publicseed.[u64 8*(int)i] = t64;
    pkp = #LEA(pkp + 8);
    i = #LEA(i + 1);
  }
  msf = #update_msf(!cond, msf);

  #update_after_call k, msf = _poly_frommsg_1(k, msgp, msf);

  aat, msf = __gen_matrix(publicseed, 1, msf);
  () = #unspill(noiseseed);
  noiseseed = #protect_ptr(noiseseed, msf);

  nonce = 0;
  #update_after_call sp[0:MLKEM_N], sp[MLKEM_N:MLKEM_N], sp[2*MLKEM_N:MLKEM_N], sp[3*MLKEM_N:MLKEM_N], msf = _poly_getnoise_eta1_4x(sp[0:MLKEM_N], sp[MLKEM_N:MLKEM_N], sp[2*MLKEM_N:MLKEM_N], sp[3*MLKEM_N:MLKEM_N], noiseseed, nonce, msf);
  noiseseed = #protect_ptr(noiseseed, msf);

  nonce = 4;
  #update_after_call ep[0:MLKEM_N], ep[MLKEM_N:MLKEM_N], ep[2*MLKEM_N:MLKEM_N], ep[3*MLKEM_N:MLKEM_N], msf = _poly_getnoise_eta1_4x(ep[0:MLKEM_N], ep[MLKEM_N:MLKEM_N], ep[2*MLKEM_N:MLKEM_N], ep[3*MLKEM_N:MLKEM_N], noiseseed, nonce, msf);
  noiseseed = #protect_ptr(noiseseed, msf);

  nonce = 8;
  epp = _poly_getnoise_eta2(epp, noiseseed, nonce);
  msf = #init_msf();

  sp, msf = __polyvec_ntt(sp, msf);
    
  for w=0 to MLKEM_K
  {
    bp[w*MLKEM_N:MLKEM_N], msf = __polyvec_pointwise_acc(bp[w*MLKEM_N:MLKEM_N], aat[w*MLKEM_VECN:MLKEM_VECN], sp, msf);
  }
 
  v, msf = __polyvec_pointwise_acc(v, pkpv, sp, msf);

  bp, msf = __polyvec_invntt(bp, msf);
  #update_after_call v, msf = _poly_invntt(v, msf);

  bp, msf = __polyvec_add2(bp, ep, msf);
  #update_after_call v, msf = _poly_add2(v, epp, msf);
  #update_after_call v, msf = _poly_add2(v, k, msf);
  () = #unspill(ctp);
  ctp = #protect_ptr(ctp, msf);
  bp = __polyvec_reduce(bp);
  v  = __poly_reduce(v);

  ctp[0:MLKEM_POLYVECCOMPRESSEDBYTES], msf = __polyvec_compress_1(ctp[0:MLKEM_POLYVECCOMPRESSEDBYTES], bp, msf);
  ctp[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_POLYCOMPRESSEDBYTES], v, msf = _poly_compress_1(ctp[MLKEM_POLYVECCOMPRESSEDBYTES:MLKEM_POLYCOMPRESSEDBYTES], v, msf);

  return ctp, msf;
}

inline 
fn __indcpa_dec_0(reg u64 msgp, reg u64 ctp, reg u64 skp)
{
  stack u16[MLKEM_N] t v mp;
  stack u16[MLKEM_VECN] bp skpv;
  #msf reg u64 msf;

  bp = __polyvec_decompress(ctp);
  ctp = #LEA(ctp + MLKEM_POLYVECCOMPRESSEDBYTES);
  v = _poly_decompress(v, ctp);

  msf = #init_msf();
  skpv, msf = __polyvec_frombytes(skp, msf);
  
  bp, msf = __polyvec_ntt(bp, msf);
  t, msf = __polyvec_pointwise_acc(t, skpv, bp, msf);
  #update_after_call t, msf = _poly_invntt(t, msf);

  #update_after_call mp, msf = _poly_sub(mp, v, t, msf);
  mp = __poly_reduce(mp);
  
  mp, msf = _poly_tomsg(msgp, mp, msf);
}

inline
fn __indcpa_dec_1(reg ptr u8[MLKEM_INDCPA_MSGBYTES] msgp, reg u64 ctp, reg u64 skp) -> reg ptr u8[MLKEM_INDCPA_MSGBYTES]
{
  stack u16[MLKEM_N] t v mp;
  stack u16[MLKEM_VECN] bp skpv;
  #msf reg u64 msf;

  bp = __polyvec_decompress(ctp);
  ctp = #LEA(ctp + MLKEM_POLYVECCOMPRESSEDBYTES);
  v = _poly_decompress(v, ctp);

  msf = #init_msf();
  skpv, msf = __polyvec_frombytes(skp, msf);
  
  bp, msf = __polyvec_ntt(bp, msf);
  t, msf = __polyvec_pointwise_acc(t, skpv, bp, msf);
  #update_after_call t, msf = _poly_invntt(t, msf);

  #update_after_call mp, msf = _poly_sub(mp, v, t, msf);
  mp = __poly_reduce(mp);
  
  msgp, mp, msf = _poly_tomsg_1(msgp, mp, msf);

  return msgp;
}
