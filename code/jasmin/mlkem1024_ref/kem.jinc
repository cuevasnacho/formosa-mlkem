require "indcpa.jinc"
require "verify.jinc"

inline
fn __crypto_kem_keypair_jazz(#spill_to_mmx reg u64 pkp, #spill_to_mmx reg u64 skp, #spill_to_mmx reg ptr u8[MLKEM_SYMBYTES*2] randomnessp)
{
  reg ptr u8[MLKEM_SYMBYTES] randomnessp1 randomnessp2;

  stack u8[32] h_pk;
  reg u64 t64;
  inline int i;

  () = #spill(pkp, skp);

  randomnessp1 = randomnessp[0:MLKEM_SYMBYTES];
  () = #spill(randomnessp);
  __indcpa_keypair(pkp, skp, randomnessp1);

  () = #unspill(skp);
  skp += MLKEM_POLYVECBYTES;
  () = #unspill(pkp);

  for i=0 to MLKEM_INDCPA_PUBLICKEYBYTES/8
  {
    (u64)[skp + 8 * i] = (u64)[pkp + 8 * i];
  }

  skp += MLKEM_INDCPA_PUBLICKEYBYTES;
  () = #spill(skp);
  t64 = MLKEM_POLYVECBYTES + MLKEM_SYMBYTES;
  h_pk = _isha3_256(h_pk, pkp, t64);
  _ = #init_msf();
  () = #unspill(skp);

  for i=0 to 4
  {
    (u64)[skp + 8 * i] = h_pk[u64 i];
  }

  () = #unspill(randomnessp);
  randomnessp2 = randomnessp[MLKEM_SYMBYTES:MLKEM_SYMBYTES];
  for i=0 to MLKEM_SYMBYTES/8
  {
    (u64)[skp + 8 * i + 32] = randomnessp2[u64 i];
  }
}

inline
fn __crypto_kem_enc_jazz(reg u64 ctp, #spill_to_mmx reg u64 shkp, #spill_to_mmx reg u64 pkp, reg ptr u8[MLKEM_SYMBYTES] randomnessp)
{
  inline int i;

  stack u8[MLKEM_SYMBYTES * 2] kr buf;
  stack u64 s_ctp;
  reg u64 t64;

  () = #spill(pkp, shkp);
  s_ctp = ctp;

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = randomnessp[u64 i];
    buf[u64 i] = t64;
  }

  () = #unspill(pkp);

  t64 = MLKEM_PUBLICKEYBYTES;
  buf[MLKEM_SYMBYTES:MLKEM_SYMBYTES] = _isha3_256(buf[MLKEM_SYMBYTES:MLKEM_SYMBYTES], pkp, t64);

  kr = _sha3_512_64(kr, buf);
  _ = #init_msf();

  () = #unspill(pkp);
  __indcpa_enc(s_ctp, buf[0:MLKEM_SYMBYTES], pkp, kr[MLKEM_SYMBYTES:MLKEM_SYMBYTES]);
  () = #unspill(shkp);

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = kr[u64 i];
    (u64)[shkp + 8*i] = t64;
  }

}

inline
fn __crypto_kem_dec_jazz(reg u64 shkp, reg u64 ctp, reg u64 skp)
{
  stack u8[MLKEM_CT_LEN] ctpc;
  stack u8[2*MLKEM_SYMBYTES] kr buf;
  stack u64 s_skp s_ctp s_shkp s_cnd;
  reg u64 pkp hp zp t64 cnd;
  inline int i;

  s_shkp = shkp;
  s_ctp = ctp;

  buf[0:MLKEM_MSGBYTES] = __indcpa_dec(buf[0:MLKEM_MSGBYTES], ctp, skp);

  hp = skp;
  hp += 32 + (24 * MLKEM_K * MLKEM_N>>3);

  for i=0 to MLKEM_SYMBYTES/8
  {
    t64 = (u64)[hp + 8*i];
    buf.[u64 MLKEM_SYMBYTES + 8*i] = t64;
  }

  s_skp = skp;

  kr = _sha3_512_64(kr, buf);
  _ = #init_msf();

  pkp = s_skp;
  pkp += 12 * MLKEM_K * MLKEM_N>>3;

  ctpc = __iindcpa_enc(ctpc, buf[0:MLKEM_SYMBYTES], pkp, kr[MLKEM_SYMBYTES:MLKEM_SYMBYTES]);
  _ = #init_msf();

  ctp = s_ctp;
  cnd = __verify(ctp, ctpc);
  s_cnd = cnd;

  zp = s_skp;
  zp += 64;
  zp += 24 * MLKEM_K * MLKEM_N>>3;

  /* fixme: should this be done in memory? */
  shkp = s_shkp;
  _shake256_1120_32(shkp, zp, ctp);  
  _ = #init_msf();

  shkp = s_shkp;
  cnd = s_cnd;
   __cmov(shkp, kr[0:MLKEM_SYMBYTES], cnd); 
}
